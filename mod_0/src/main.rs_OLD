use std::{ops::Not, fs::File, io::Write};



fn main() {
    println!("Hello, world!");

    let mut generator = Generator::new();

    for _ in 0..10000 {
        let n = generator.next();
        //println!("{:3} {:08b} | {:08b} {:08b} {:08b} {:08b} {:08b} {:08b} {:08b}", n, n, generator.buffer[0], generator.buffer[1], generator.buffer[2], generator.buffer[3], generator.buffer[4], generator.buffer[5], generator.buffer[6]);
    }
    println!("{:?}", generator);


    let image = File::create("image.ppm").unwrap();
    let mut image = std::io::BufWriter::new(image);
    image.write(r##"P2
8 1000
255
"##.as_bytes()).unwrap();
    for _ in 0..1000 {
        let n = generator.next();
        image.write(format!("{n} {} {} {} {} {} {} {}\n", generator.buffer[0], generator.buffer[1], generator.buffer[2], generator.buffer[3], generator.buffer[4], generator.buffer[5], generator.buffer[6]).as_bytes()).unwrap();
    }
}

#[derive(Debug)]
struct Generator {
    curr: u8,
    buffer: [u8; 7],
}

impl Generator {
    fn new() -> Self {
        Self { curr: 1, buffer: [0; 7] }
    }

    fn next(&mut self) -> u8 {
        //let next = scramble(self.curr.overflowing_add(1).0, self.buffer);
        let next = scramble(self.curr.overflowing_add(1).0, self.buffer);
        
        let mut a = next;
        for i in 0..7 {
            self.buffer[i] = scramble(a, self.buffer);
            a = self.buffer[i];
        }

        self.curr = a;

        self.curr
    }
}

fn scramble(mut a: u8, buffer: [u8; 7]) -> u8 {
    /// Picks the i-th bit from a, shift the remaining bits to the right to fill the gap.
    fn pick_bit(a: &mut u8, index: u8) -> u8 {
        debug_assert!(index < 8);

        let result = (*a >> index) & 1;

        // the bits from index 0 to index-1:
        let bits_before = if index == 0 {
            0
        } else {
            (*a << (8 - index)) >> (8 - index)
        };

        // the bits from index+1 to 7:
        let bits_after = if index == 7 {
            0
        } else {
            *a >> (index + 1)
        };

        *a = bits_before | (bits_after << index);

        result
    }


    let next = 0;
    let next = next | pick_bit(&mut a, buffer[0].rem_euclid(8));
    let next = next | pick_bit(&mut a, buffer[1].rem_euclid(7)) << 1;
    let next = next | pick_bit(&mut a, buffer[2].rem_euclid(6)) << 2;
    let next = next | pick_bit(&mut a, buffer[3].rem_euclid(5)) << 3;
    let next = next | pick_bit(&mut a, buffer[4].rem_euclid(4)) << 4;
    let next = next | pick_bit(&mut a, buffer[5].rem_euclid(3)) << 5;
    let next = next | pick_bit(&mut a, buffer[6].rem_euclid(2)) << 6;
    let next = next | (a & 1) << 7;

    next
}